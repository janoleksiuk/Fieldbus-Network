#include <iostream>
#include <sstream>
#include <vector>
#include <iomanip>
#include <chrono>
#include <cctype>
using namespace std;

// --------------------------------------------------------------
// Funkcja obliczająca CRC Modbus RTU (tabelaryczna wersja)
// --------------------------------------------------------------
unsigned short CRC(unsigned char *pMessage, unsigned int NumberOfBytes)
{
    static unsigned char aCRCHi[] = {
        0x00, 0xc1, 0x81, 0x40, 0x01, 0xc0, 0x80, 0x41,
        0x01, 0xc0, 0x80, 0x41, 0x00, 0xc1, 0x81, 0x40,
        0x01, 0xc0, 0x80, 0x41, 0x00, 0xc1, 0x81, 0x40,
        0x00, 0xc1, 0x81, 0x40, 0x01, 0xc0, 0x80, 0x41,
        0x01, 0xc0, 0x80, 0x41, 0x00, 0xc1, 0x81, 0x40,
        0x00, 0xc1, 0x81, 0x40, 0x01, 0xc0, 0x80, 0x41,
        0x00, 0xc1, 0x81, 0x40, 0x01, 0xc0, 0x80, 0x41,
        0x01, 0xc0, 0x80, 0x41, 0x00, 0xc1, 0x81, 0x40,
        0x01, 0xc0, 0x80, 0x41, 0x00, 0xc1, 0x81, 0x40,
        0x00, 0xc1, 0x81, 0x40, 0x01, 0xc0, 0x80, 0x41,
        0x01, 0xc0, 0x80, 0x41, 0x00, 0xc1, 0x81, 0x40,
        0x00, 0xc1, 0x81, 0x40, 0x01, 0xc0, 0x80, 0x41,
        0x01, 0xc0, 0x80, 0x41, 0x00, 0xc1, 0x81, 0x40,
        0x00, 0xc1, 0x81, 0x40, 0x01, 0xc0, 0x80, 0x41,
        0x00, 0xc1, 0x81, 0x40, 0x01, 0xc0, 0x80, 0x41,
        0x01, 0xc0, 0x80, 0x41, 0x00, 0xc1, 0x81, 0x40
    };
    static unsigned char aCRCLo[] = {
        0x00, 0xc0, 0xc1, 0x01, 0xc3, 0x03, 0x02, 0xc2,
        0xc6, 0x06, 0x07, 0xc7, 0x05, 0xc5, 0xc4, 0x04,
        0xcc, 0x0c, 0x0d, 0xcd, 0x0f, 0xcf, 0xce, 0x0e,
        0x0a, 0xca, 0xcb, 0x0b, 0xc9, 0x09, 0x08, 0xc8,
        0xd8, 0x18, 0x19, 0xd9, 0x1b, 0xdb, 0xda, 0x1a,
        0x1e, 0xde, 0xdf, 0x1f, 0xdd, 0x1d, 0x1c, 0xdc,
        0x14, 0xd4, 0xd5, 0x15, 0xd7, 0x17, 0x16, 0xd6,
        0xd2, 0x12, 0x13, 0xd3, 0x11, 0xd1, 0xd0, 0x10,
        0xf0, 0x30, 0x31, 0xf1, 0x33, 0xf3, 0xf2, 0x32,
        0x36, 0xf6, 0xf7, 0x37, 0xf5, 0x35, 0x34, 0xf4,
        0x3c, 0xfc, 0xfd, 0x3d, 0xff, 0x3f, 0x3e, 0xfe,
        0xfa, 0x3a, 0x3b, 0xfb, 0x39, 0xf9, 0xf8, 0x38,
        0x28, 0xe8, 0xe9, 0x29, 0xeb, 0x2b, 0x2a, 0xea,
        0xee, 0x2e, 0x2f, 0xef, 0x2d, 0xed, 0xec, 0x2c,
        0xe4, 0x24, 0x25, 0xe5, 0x27, 0xe7, 0xe6, 0x26,
        0x22, 0xe2, 0xe3, 0x23, 0xe1, 0x21, 0x20, 0xe0
    };

    unsigned char HiByte = 0xFF;
    unsigned char LoByte = 0xFF;
    unsigned char Index;

    while (NumberOfBytes--)
    {
        Index = HiByte ^ *pMessage++;
        HiByte = LoByte ^ aCRCHi[Index];
        LoByte = aCRCLo[Index];
    }
    return (HiByte << 8 | LoByte);
}

// --------------------------------------------------------------
// Pomocnicza funkcja: parsowanie sekwencji bajtów hex
// --------------------------------------------------------------
vector<unsigned char> parseHexSequence(const string &input)
{
    vector<unsigned char> data;
    stringstream ss(input);
    string token;
    while (ss >> token)
    {
        if (token.size() % 2 != 0) token = "0" + token;
        for (size_t i = 0; i < token.size(); i += 2)
        {
            unsigned int byteVal;
            string byteStr = token.substr(i, 2);
            stringstream hexByte(byteStr);
            hexByte >> hex >> byteVal;
            data.push_back(static_cast<unsigned char>(byteVal));
            if (data.size() >= 256)
                throw runtime_error("Zbyt długa sekwencja (>256 bajtów)");
        }
    }
    return data;
}

// --------------------------------------------------------------
// Główna część programu
// --------------------------------------------------------------
int main()
{
    try
    {
        cout << "Podaj sekwencje bajtow w HEX (np. 01 10 0011 0003 06 1AC4 BAD0):\n> ";
        string line;
        getline(cin, line);

        vector<unsigned char> bytes = parseHexSequence(line);
        if (bytes.empty())
        {
            cerr << "Brak danych do obliczenia CRC!\n";
            return 1;
        }

        cout << "Podaj liczbe powtorzen algorytmu [1..1000000000]: ";
        unsigned long long n;
        cin >> n;
        if (n < 1 || n > 1000000000ULL)
        {
            cerr << "Nieprawidlowa liczba powtorzen.\n";
            return 1;
        }

        auto start = chrono::high_resolution_clock::now();

        unsigned short crc = 0;
        for (unsigned long long i = 0; i < n; ++i)
        {
            crc = CRC(bytes.data(), bytes.size());
        }

        auto end = chrono::high_resolution_clock::now();
        chrono::duration<double> duration = end - start;

        unsigned char crcHi = (crc >> 8) & 0xFF;
        unsigned char crcLo = crc & 0xFF;

        cout << "\nCRC (po " << n << " powtorzeniach): "
             << hex << uppercase << setw(2) << setfill('0') << (int)crcHi << " "
             << setw(2) << setfill('0') << (int)crcLo << endl;
        cout << "Czas realizacji: " << dec << duration.count() << " s\n";
    }
    catch (exception &e)
    {
        cerr << "Blad: " << e.what() << endl;
    }

    return 0;
}

